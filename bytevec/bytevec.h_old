//Copyright Notice
/*
    eXintegrator integrated expression analysis system
    Copyright (C) 2004  Martin Jakt & Okada Mitsuhiro
  
    This file is part of the eXintegrator integrated expression analysis system. 
    eXintegrator is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version. 

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
  
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    PS. If you can think of a better name, please let me know...
*/
//End Copyright Notice

#ifndef BYTEVEC_H
#define BYTEVEC_H

#include <vector>
#include <string>

using namespace std;

class ByteVec {
  public :
    ByteVec();
  ByteVec(int inSize);   // the initial size;
  void init();           // initialise,, currentPosition to 0, resized to 0. 
  void reStart();        // set currentPosition to 0.. 
  int size();            // return the size of the data vector
  // append functions for growing the thing
  void app(char c);      // all we need for the moment
  // functions for reading from the beginning,, like a stream
  char c();    // reads a char.. !
  int i();     // reads an int
  unsigned int ui();  // returns an unsigned int. 
  int qi();    // reads like a Q_INT32 and returns an int
  float f();   // reads a float (4 bytes long);
  double d();  // read a float,, -- 4 bytes long, -if I'm not mistaken.. 
  string s();  // reads a string (first one qi giving the length, and then that many strings into a string.
  bool b();    // read one byte as a boolean.. 
  bool ok();   // no error has occured.. resets the error code to 0

  private :
    //char* readFourBytes();     // shouldn't need this if I use a char* array instead of a vector, as I know the data structure.. 
    int currentPosition;       // where are we at the moment,,--- for Reading..
    int memSize;               // the amount of memory allocated..
    int curSize;               // the current number of bytes allocated.. 
    char* data;                // just a pointer to a vector.. 
    void grow();               // double the memory allocation. 
    bool error;                // true if some error occurs.. 
    //  vector<char> data;           // the actual data.. 
};

#endif

