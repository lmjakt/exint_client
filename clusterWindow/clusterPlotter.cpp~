#include "clusterPlotter.h"
#include "../client.h"
#include "../meanPlotWindow/meanExpressionPlotter.h"
#include <qpopupmenu.h>
#include <qfiledialog.h>
#include <vector>
#include <iostream>
#include <fstream>

using namespace std;

ClusterPlotter::ClusterPlotter(QWidget* parent, const char* name)
  : MeanExpressionPlotter(parent, name)
{
  actionMenu = new QPopupMenu(this);
  actionMenu->insertItem("Load Genes", this, SLOT(loadGenes()), CTRL+Key_L, 1);
  actionMenu->insertItem("Save Clusters", this, SLOT(saveClusters()), CTRL+Key_S, 2);

  clusterNumber = -1;
  theCluster = 0;
}

void ClusterPlotter::paintCluster(clusterSet* cs, int index){
  if(index < cs->points.size() && index >= 0){
    if(cs->points[index].size()){
      penWidth = 2;
      paintLines(cs->points[index], cs->expts[index], cs->expInfo);
      clusterNumber = index;
      theCluster = cs;
    }
  }
}

void ClusterPlotter::paintClusterSet(clusterSet* cs){
  if(cs->centers.size()){
    penWidth = 4;
    paintLines(cs->centers, cs->centExpts, cs->expInfo);
    clusterNumber = -1;
    theCluster = cs;
  }
}

void ClusterPlotter::mousePressEvent(QMouseEvent* e){
  if(e->state() == Qt::ControlButton || e->button() == 2){
    if(clusterNumber != -1){
      actionMenu->popup(mapToGlobal(e->pos()));
    }
  }
}

void ClusterPlotter::loadGenes(){
  cout << "Cluster Plotter loadGenes private slot called, what a wonderful world it issss" << endl;
  if(clusterNumber < 0 || theCluster == 0){
    return;
  }
  if(clusterNumber < theCluster->indices.size()){
    emit pleaseLoadTheseGenes(theCluster->indices[clusterNumber]);
  }
}

void ClusterPlotter::saveClusters(){
  QString fileName = QFileDialog::getSaveFileName();
  if(fileName.isNull()){
    return;
  }
  ofstream out(fileName.latin1());
  if(!out){
    cout << "Couldn't open file" << endl;
    return;
  }
  // File identifier
  out << "groovy_cluster_set_file" << endl;
  // and lets write some numbers.. 
  out << theCluster->indices.size() << " clusters" << endl;
  for(int i=0; i < theCluster->indices.size(); i++){
    out << i << "\t";
    for(int j=0; j < theCluster->indices[i].size(); j++){
      out << theCluster->indices[i][j] << " ";
    }
    out << endl;
  }
  out.close();
}
