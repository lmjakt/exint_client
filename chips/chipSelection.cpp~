#include "chipSelection.h"
#include <iostream>

using namespace std;

ChipSelection::ChipSelection(){
  // there isn't actually anything I need to do here I think.
}

ChipSelection::~ChipSelection(){
  // and nothing here either really..
}

void ChipSelection::setChipInfo(map<int, chipInfo> info){
  chips = info;
  states.erase(states.begin(), states.end());
  for(map<int, chipInfo>::iterator it=chips.begin(); it != chips.end(); it++){
    states.insert(make_pair((*it).first, true));
  }
  emit newChipInfo(states);
}

void ChipSelection::toggleChip(int n){
  // set state of n to be something it isn't.. 
  map<int, bool>::iterator it = states.find(n);
  if(it == states.end()){
    cerr << "no chip defined for n=" << n << endl;
    return;
  }
  (*it).second = !(*it).second;
  // and also set all the equivalents to this; 
  map<int, chipInfo>::iterator cit = chips.find(n);
  set<int>::iterator sit;
  if(cit != chips.end()){
    for(sit = (*cit).second.equivs.begin(); sit != (*cit).second.equivs.end(); sit++){
      states[sit] = (*it).second;
    }
  }
    
  // then see if we need to change anything else..
  for(cit=chips.begin(); cit != chips.end(); cit++){
    if(!(*it).second){         // this is to say that the state got switched off, then any chip containing this group has to be off too..
      if((*cit).second.defined(n)){
	states[(*cit).first] = false;
      }
    }else{
      // in this case its no. if all the members of an equivalent group are now on, then we have to set that to on
      bool check = true;
      for(sit = (*cit).second.equivs.begin(); sit != (*cit).second.equivs.end(); sit++){
	if(!states[(*sit)]){
	  check = false;
	}
      }
      states[(*cit).first] = check;  // but what if this was already on ?? I'm really not sure..
    }
  }
  emit toggleButtos(states);         // this way we can connect to several user interfaces rather easily.. 
}
