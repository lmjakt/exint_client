#ifndef POINTDRAWER_H
#define POINTDRAWER_H

#include "distanceMapper.h"
#include <qwidget.h>
#include <qrect.h>
#include <qpoint.h>
#include <qpopupmenu.h>
#include <vector>
#include <set>

using namespace std;

class PointDrawer : public QWidget
{
  Q_OBJECT

    public :
    PointDrawer(QWidget* parent=0, const char* name=0);     // it just draws things.. so no need.. 
  ~PointDrawer();

  void setData(vector<dpoint> p);        // set the data, then redraw..
  
  private slots :
    void compareCellTypes();
  void setcoords();

  private :
    void paintEvent(QPaintEvent* e);
  void mousePressEvent(QMouseEvent* e);
  void mouseMoveEvent(QMouseEvent* e);
  void mouseReleaseEvent(QMouseEvent* e);
  void checkSelected();

  // and somewhere to keep data for stuff in..
  vector<QPoint> selectPoints;
  vector<dpoint> points;
  vector<QRect> regions;  // one region for each point.. so that we can check for mouse Events... 
  set<uint> selectedA;
  set<uint> selectedB;     // bit ugly but there you go.. 
  bool itsA;              // stupid if I ever saw something but there you go.. 
  QRect movingRect;    // 0 if nothing moving, otherwise, move it by 
  int movingId;
  float maxX, minX, maxY, minY, maxStress;    // need this for the painting..
  int diameter;                               // how big do we make the circles.. 
  int margin;                                 // how much of a margin do we want.
  int lastX, lastY;      // so that I can use QRegion::translate .. 
  
  QPopupMenu* menu;

  signals :
    void updatePosition(int, float, float);  // id, x, y, .... 
  void compareCells(vector<int>, vector<int>);
  void setCoordinates();             // ask my ower to do something about the coordinates .. pass them up the food chain please..
};

#endif
