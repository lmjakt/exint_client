#ifndef COMPARECONTROLLER_H
#define COMPARECONTROLLER_H

#include <qwidget.h>
#include <qlayout.h>
#include <qcheckbox.h>
#include "distanceViewer.h"
#include "../customWidgets/fSpinBox.h"
#include "../dataStructs.h"
#include <set>
#include <vector>

using namespace std;

class CompareController : public QWidget
{

  Q_OBJECT
    
    public :
    CompareController(QWidget* parent=0, const char* name=0);
  ~CompareController();

  public slots :
  void newDistances(exptDistanceInfo info);  
  private slots :
    void compareFull();
  void compareFlat();
  void readPhylipDistances();              // Just need one button.. get a file name using a file dialog thingy.. 
  void deleteSender();

  private :
    QVBoxLayout* fullBox;
  QVBoxLayout* flatBox;
  QVBoxLayout* phylipBox;
  QVBoxLayout* traceBox;
  set<DistanceViewer*> fullDists;
  set<DistanceViewer*> flatDists;
  set<DistanceViewer*> phylipDists;
  
  // I need a couple of FSpinBoxes for float values.. -- these are not
  // so great at the moment so use carefully..
  FSpinBox* flatSigma;
  FSpinBox* flatOrder;
  
  QCheckBox* makeRecord;
  void recordDistances(exptDistanceInfo& info);     // write a file of the distances that can be read by something like gnuplot.. Not sure about the labels yet.. but wait for it.

  signals :
    void doFullCompare();
  void doFlatCompare(float sigma, float order);    // the parameters for a successful thing.
  void compareCells(vector<int>, vector<int>);     // well, get the statisticial contributors to the distances.. -- have to think of some sort of thingy for this.. 
  void setCoordinates(vector<PointCoordinate>);
  void traceExperiments();                        // maybe put a float in there later on.. --> for controlling things.. 
};

#endif

